{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode';\nimport { GET_ERRORS, SET_CURRENT_USER } from './types';\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function (res) {\n      return history.push('/login');\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //login token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      //save to local storage\n      var token = res.data.token; //set token to ls\n\n      localStorage.setItem('jwtToken', token); //set token to auth header\n\n      setAuthToken(token); //decode token to get user data\n\n      var decoded = jwt_decode(token); //set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Quest_App/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,EAAqBC,gBAArB,QAA4C,SAA5C;AAGA,OAAO,IAAMC,YAAY,GAAC,SAAbA,YAAa,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAsB,UAAAC,QAAQ,EAAE;AACtDR,IAAAA,KAAK,CACJS,IADD,CACM,qBADN,EAC6BH,QAD7B,EAECI,IAFD,CAEM,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFT,EAGCC,KAHD,CAGO,UAAAC,GAAG;AAAA,aACNN,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEZ,UADD;AAELa,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CADF;AAAA,KAHV;AASH,GAVyB;AAAA,CAAnB,C,CAYP;;AACA,OAAO,IAAMC,SAAS,GAAE,SAAXA,SAAW,CAACb,QAAD;AAAA,SAAa,UAAAE,QAAQ,EAAG;AAC5CR,IAAAA,KAAK,CAACS,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EACCI,IADD,CACM,UAAAC,GAAG,EAAG;AACR;AADQ,UAEFS,KAFE,GAEMT,GAAG,CAACO,IAFV,CAEFE,KAFE,EAGR;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJQ,CAKR;;AACAnB,MAAAA,YAAY,CAACmB,KAAD,CAAZ,CANQ,CAOR;;AACA,UAAMG,OAAO,GAAErB,UAAU,CAACkB,KAAD,CAAzB,CARQ,CASR;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,KAZD,EAaCV,KAbD,CAaO,UAAAC,GAAG;AAAA,aACNN,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEZ,UADD;AAELa,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CADF;AAAA,KAbV;AAmBH,GApBuB;AAAA,CAAjB,C,CAsBP;;AACA,OAAO,IAAMM,cAAc,GAAC,SAAfA,cAAe,CAACD,OAAD,EAAW;AACnC,SAAM;AACFR,IAAAA,IAAI,EAACX,gBADH;AAEFY,IAAAA,OAAO,EAAEO;AAFP,GAAN;AAKH,CANM,C,CAQP;;AACA,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAjB,QAAQ,EAAI;AACxC;AACAa,IAAAA,YAAY,CAACK,UAAb,CAAwB,UAAxB,EAFwC,CAGxC;;AACAzB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJwC,CAKxC;;AACAO,IAAAA,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPuB;AAAA,CAAnB","sourcesContent":["import axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { GET_ERRORS, SET_CURRENT_USER} from './types';\r\n\r\n\r\nexport const registerUser=(userData, history)=> dispatch=>{\r\n    axios\r\n    .post('/api/users/register', userData)\r\n    .then(res => history.push('/login'))\r\n    .catch(err=> \r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        })    \r\n    );\r\n}\r\n\r\n//login token\r\nexport const loginUser =(userData)=> dispatch =>{\r\n    axios.post('/api/users/login', userData)\r\n    .then(res =>{\r\n        //save to local storage\r\n        const{token}= res.data;\r\n        //set token to ls\r\n        localStorage.setItem('jwtToken', token);\r\n        //set token to auth header\r\n        setAuthToken(token);\r\n        //decode token to get user data\r\n        const decoded =jwt_decode(token);\r\n        //set current user\r\n        dispatch(setCurrentUser(decoded));\r\n    })\r\n    .catch(err=> \r\n        dispatch({\r\n            type: GET_ERRORS,\r\n            payload: err.response.data\r\n        })    \r\n    );\r\n};\r\n\r\n//set logged in user\r\nexport const setCurrentUser=(decoded)=>{\r\n    return{\r\n        type:SET_CURRENT_USER,\r\n        payload: decoded\r\n\r\n    }\r\n}\r\n\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n    // Remove token from localStorage\r\n    localStorage.removeItem('jwtToken');\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to {} which will set isAuthenticated to false\r\n    dispatch(setCurrentUser({}));\r\n  };\r\n  "]},"metadata":{},"sourceType":"module"}