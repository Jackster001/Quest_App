{"ast":null,"code":"import _defineProperty from \"/Users/jackie/Desktop/Projects/Quest_App/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/jackie/Desktop/Projects/Quest_App/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jackie/Desktop/Projects/Quest_App/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/jackie/Desktop/Projects/Quest_App/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jackie/Desktop/Projects/Quest_App/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/jackie/Desktop/Projects/Quest_App/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/jackie/Desktop/Projects/Quest_App/client/src/components/QuestionModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { addQuestion } from '../actions/questionActions';\nimport PropTypes from 'prop-types';\n\nvar QuestionModal =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionModal, _Component);\n\n  function QuestionModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, QuestionModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(QuestionModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      modal: false,\n      name: '',\n      Desc: '',\n      question: _this.name,\n      description: _this.Desc\n    };\n\n    _this.toggle = function () {\n      _this.setState({\n        modal: !_this.state.modal\n      });\n    };\n\n    _this.onChange1 = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.onChange2 = function (event2) {\n      _this.setState(_defineProperty({}, event2.target.Desc, event2.target.value));\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      var newQuestion = {\n        question: _this.state.name,\n        description: _this.state.Desc //add item via addQuestion  question\n\n      };\n\n      _this.props.addQuestion(newQuestion); //Close modal\n\n\n      _this.toggle();\n    };\n\n    return _this;\n  }\n\n  _createClass(QuestionModal, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"dark\",\n        style: {\n          marginBottom: '2rem',\n          width: '25%'\n        },\n        onClick: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"ask Question\"), React.createElement(Modal, {\n        isOpen: this.state.modal,\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Ask Question\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Question\"), React.createElement(Input, {\n        type: \"textarea\",\n        question: \"question\",\n        name: \"name\",\n        placeholder: \"Place your question here...\",\n        onChange: this.onChange1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), React.createElement(Button, {\n        color: \"dark\",\n        style: {\n          marginTop: \"2rem\"\n        },\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Submit\"))))));\n    }\n  }]);\n\n  return QuestionModal;\n}(Component);\n\nQuestionModal.propTypes = {\n  addQuestion: PropTypes.func.isRequired,\n  question: PropTypes.object.isRequired,\n  description: PropTypes.object.isRequired\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    question: state.question,\n    description: state.description\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addQuestion: addQuestion\n})(QuestionModal);","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Quest_App/client/src/components/QuestionModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","connect","addQuestion","PropTypes","QuestionModal","state","modal","name","Desc","question","description","toggle","setState","onChange1","event","target","value","onChange2","event2","onSubmit","preventDefault","newQuestion","props","marginBottom","width","marginTop","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport{\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input\n} from 'reactstrap';\nimport {connect} from 'react-redux';\nimport {addQuestion} from '../actions/questionActions';\nimport PropTypes from 'prop-types';\nclass QuestionModal extends Component{\n    state ={\n        modal: false,\n        name: '',\n        Desc:'',\n        question: this.name,\n        description: this.Desc\n    }\n\n    toggle= () =>{\n        this.setState({\n            modal: !this.state.modal\n        });\n    }\n\n    onChange1=(event)=>{\n        this.setState({[event.target.name]: event.target.value});\n    }\n    onChange2=(event2)=>{\n        this.setState({[event2.target.Desc]: event2.target.value});\n    }\n\n    onSubmit= (event) =>{\n        event.preventDefault();\n        const newQuestion ={\n            question: this.state.name,\n            description: this.state.Desc\n        }\n\n         //add item via addQuestion  question\n         this.props.addQuestion(newQuestion);\n         //Close modal\n         this.toggle();\n    }\n\n    render(){\n        return(\n            <div>\n                \n                <Button\n                    color=\"dark\"\n                    style={{marginBottom: '2rem', width:'25%'}}\n                    onClick={this.toggle}\n                >ask Question</Button>\n                <Modal\n                    isOpen={this.state.modal}\n                    toggle={this.toggle}\n                >\n                    <ModalHeader toggle={this.toggle}>Ask Question</ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmit}>\n                            <FormGroup>\n                                <Label for=\"question\">Question</Label>\n                                <Input \n                                    type=\"textarea\"\n                                    question=\"question\"\n                                    name='name'\n                                    placeholder=\"Place your question here...\"\n                                    onChange={this.onChange1}\n                                />\n                                {/* <Label for=\"description\">Description</Label> */}\n                                {/* <Input \n                                    type=\"textarea\"\n                                    Desc=\"Description\"\n                                    description=\"description\"\n                                    placeholder=\"More details...\"\n                                    onChange={this.onChange2}\n                                /> */}\n                                <Button\n                                    color=\"dark\"\n                                    style={{marginTop:\"2rem\"}}\n                                    block\n                                >Submit</Button>\n                            </FormGroup>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nQuestionModal.propTypes={\n    addQuestion:PropTypes.func.isRequired,\n    question:PropTypes.object.isRequired,\n    description:PropTypes.object.isRequired\n\n}\nconst mapStateToProps = state => ({\n    question: state.question,\n    description: state.description\n});\n\nexport default connect(mapStateToProps, {addQuestion})(QuestionModal);"]},"metadata":{},"sourceType":"module"}