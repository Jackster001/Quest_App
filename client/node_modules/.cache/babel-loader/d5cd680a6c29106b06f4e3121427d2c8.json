{"ast":null,"code":"import _toConsumableArray from \"/Users/jackie/Desktop/Projects/Quest_App/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/jackie/Desktop/Projects/Quest_App/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_QUESTIONS, ADD_QUESTION, DELETE_QUESTION, QUESTIONS_LOADING, GET_SPECIFIC_QUESTION, UPDATE_ANSWER } from '../actions/types';\nimport QuestionModal from '../components/QuestionModal'; // import update from 'react-addons-update';\n\nvar initialState = {\n  questionItems: [],\n  oneQuestion: null,\n  loading: false\n};\nexport default function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_QUESTIONS:\n      return _objectSpread({}, state, {\n        questionItems: action.payload,\n        loading: false\n      });\n    // case UPDATE_ANSWER:\n    //     return update(state, { \n    //         answer: { \n    //         [action._id]: {\n    //             answer: {$set: action.payload}\n    //         }\n    //     }\n    //     });\n\n    case GET_SPECIFIC_QUESTION:\n      return _objectSpread({}, state, {\n        oneQuestion: action.payload // oneQuestion: state.questionItems.filter(questionItems => questionItems._id == action.payload)\n\n      });\n\n    case DELETE_QUESTION:\n      return _objectSpread({}, state, {\n        questionItems: state.questionItems.filter(function (questionItems) {\n          return questionItems._id !== action.payload;\n        })\n      });\n\n    case ADD_QUESTION:\n      return _objectSpread({}, state, {\n        questionItems: [action.payload].concat(_toConsumableArray(state.questionItems))\n      });\n\n    case QUESTIONS_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/jackie/Desktop/Projects/Quest_App/client/src/reducers/questionReducer.js"],"names":["GET_QUESTIONS","ADD_QUESTION","DELETE_QUESTION","QUESTIONS_LOADING","GET_SPECIFIC_QUESTION","UPDATE_ANSWER","QuestionModal","initialState","questionItems","oneQuestion","loading","state","action","type","payload","filter","_id"],"mappings":";;AAAA,SAAQA,aAAR,EAAuBC,YAAvB,EAAqCC,eAArC,EAAsDC,iBAAtD,EAAyEC,qBAAzE,EAAgGC,aAAhG,QAAoH,kBAApH;AACA,OAAOC,aAAP,MAA0B,6BAA1B,C,CACA;;AAEA,IAAMC,YAAY,GAAC;AACfC,EAAAA,aAAa,EAAC,EADC;AAEfC,EAAAA,WAAW,EAAE,IAFE;AAGfC,EAAAA,OAAO,EAAE;AAHM,CAAnB;AAMA,eAAe,YAAqC;AAAA,MAA5BC,KAA4B,uEAArBJ,YAAqB;AAAA,MAAPK,MAAO;;AAChD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKb,aAAL;AACI,+BACOW,KADP;AAEIH,QAAAA,aAAa,EAAEI,MAAM,CAACE,OAF1B;AAGIJ,QAAAA,OAAO,EAAE;AAHb;AAKJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKN,qBAAL;AACI,+BACOO,KADP;AAEIF,QAAAA,WAAW,EAACG,MAAM,CAACE,OAFvB,CAGI;;AAHJ;;AAKJ,SAAKZ,eAAL;AACI,+BACOS,KADP;AAEIH,QAAAA,aAAa,EAAEG,KAAK,CAACH,aAAN,CAAoBO,MAApB,CAA2B,UAAAP,aAAa;AAAA,iBAAIA,aAAa,CAACQ,GAAd,KAAsBJ,MAAM,CAACE,OAAjC;AAAA,SAAxC;AAFnB;;AAKJ,SAAKb,YAAL;AACI,+BACOU,KADP;AAEIH,QAAAA,aAAa,GAAGI,MAAM,CAACE,OAAV,4BAAsBH,KAAK,CAACH,aAA5B;AAFjB;;AAIJ,SAAKL,iBAAL;AACI,+BACOQ,KADP;AAEID,QAAAA,OAAO,EAAE;AAFb;;AAIJ;AAAS,aAAOC,KAAP;AArCb;AAuCH","sourcesContent":["import {GET_QUESTIONS, ADD_QUESTION, DELETE_QUESTION, QUESTIONS_LOADING, GET_SPECIFIC_QUESTION, UPDATE_ANSWER} from '../actions/types';\nimport QuestionModal from '../components/QuestionModal';\n// import update from 'react-addons-update';\n\nconst initialState={\n    questionItems:[],\n    oneQuestion: null,\n    loading: false\n}\n\nexport default function(state= initialState, action){\n    switch(action.type){\n        case GET_QUESTIONS:\n            return{\n                ...state,\n                questionItems: action.payload,\n                loading: false\n            };\n        // case UPDATE_ANSWER:\n        //     return update(state, { \n        //         answer: { \n        //         [action._id]: {\n        //             answer: {$set: action.payload}\n        //         }\n        //     }\n        //     });\n        case GET_SPECIFIC_QUESTION:\n            return{\n                ...state,\n                oneQuestion:action.payload\n                // oneQuestion: state.questionItems.filter(questionItems => questionItems._id == action.payload)\n            };\n        case DELETE_QUESTION:\n            return{\n                ...state,\n                questionItems: state.questionItems.filter(questionItems => questionItems._id !== action.payload),\n\n            };\n        case ADD_QUESTION:\n            return{\n                ...state,\n                questionItems: [action.payload, ...state.questionItems]\n            };\n        case QUESTIONS_LOADING:\n            return{\n                ...state,\n                loading: true\n            }\n        default: return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}